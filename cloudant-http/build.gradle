/*
 * Copyright Â© 2016 IBM Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    //needed to compile, but optional for consumers of java-cloudant
    compile(group: 'com.squareup.okhttp3', name: 'okhttp-urlconnection', version: '3.12.12') {
        ext.optional = true
    }
}

javadoc {
    include("**/http/*")
    include("**/http/interceptors/*")
    exclude("**/http/Version.java")
}

uploadArchives {
    repositories {
        mavenDeployer {

            //augment the pom with additional information
            pom.project {
                description 'HTTP utilities for Java Cloudant clients'
                inceptionYear '2016'
            }
        }
    }
}

// Add optional dependency attribute to pom (workaround for https://issues.gradle.org/browse/GRADLE-1749)
// Get the gradle dependencies and make a map of artifactId to dependency object
def compileDependencies = configurations.compile.dependencies.collectEntries { [it.name, it] }
// Identify pom tasks
def installer = install.repositories.mavenInstaller
def deployer = uploadArchives.repositories.mavenDeployer
// When any pom tasks are being configured then analyze the gradle dependency for optional
// property and apply the optional property to the pom if it was set in the gradle
[installer, deployer]*.pom*.whenConfigured { pom ->
    pom.dependencies.findAll {
        def compileDependency = compileDependencies.get(it.artifactId)
        return compileDependency?.hasProperty('optional') && compileDependency.optional
    }.each { dep -> dep.optional = true }
}
