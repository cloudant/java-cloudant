/*
 * Copyright Â© 2016, 2018 IBM Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.6'
    compile project(':cloudant-http')
    //test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '3.12.12'
    testCompile group: 'org.jmockit', name: 'jmockit', version: '1.34'
    testCompile group: 'org.littleshoot', name: 'littleproxy', version: '1.1.0'
}

javadoc {
    options.overview = "overview.html"
    include("**/lightcouch/*Exception.java",
            "**/client/api/**")
    // Resolve the links to the cloudant-http project javadoc
    options.linksOffline("http://static.javadoc.io/com.cloudant/cloudant-http/${project.version}","${project.rootProject.rootDir}/cloudant-http/build/docs/javadoc");
}

javadocJar {
    // Include the logging.properties example
    from rootProject.rootDir.path + '/logging.properties'
}

// we need Java 1.8 features for JUnit 5 features, but our production code is 1.6
compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

tasks.withType(Test) {
    def jMockit
    doFirst {
        // Do this when the task runs, not before because it will freeze the testCompile config.
        jMockit = project.configurations.testCompile.find {
            it.name.startsWith("jmockit-")
        }
        jvmArgs "-javaagent:${jMockit}"
    }
    // Special environment variables for integration tests
    [SERVER_URL:'test.server.url',
     SERVER_USER:'test.server.user',
     SERVER_PASSWORD:'test.server.password',
     TEST_REPLICATION_SOURCE_URL:'test.replication.source.url',
     TEST_IAM_TOKEN_URL:'com.cloudant.client.iamserver'].each { k,v ->
        def e = System.getenv(k)
        if (e) {
            systemProperty v, e
        }
    }
}

// Run tests which are compatible with all versions of Couch or
// Cloudant.
// This is the default test target.
test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        excludeTags 'RequiresCouch', 'RequiresCloudant'
    }
}

task noDBTest(type: Test) {
    // Run unit tests that do not need a running database
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        excludeTags 'RequiresDB'
    }
}

task cloudantTest(type: Test) {
    // Run all the tests that work for both Cloudant Local and Cloudant service
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        excludeTags 'RequiresCloudantService'
    }
}

task cloudantServiceTest(type: Test) {
    // Run the unit tests and general DB tests and the DB tests that specifically require the
    // Cloudant service
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        excludeTags 'RequiresCloudantLocal', 'RequiresCouch'
    }
}

task integrationTest(type: Test) {
    // Run all tests that need a running DB and those for Cloudant, but not unit tests
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        includeTags 'RequiresDB', 'RequiresCloudant', 'RequiresCloudantService'
    }
}

//task for generating a client properties file
class ClientProperties extends DefaultTask {

    //allow this to be configured, default to client.properties
    File clientPropsPath = new File("client.properties")

    //internal
    private Properties p = new Properties()

    def load() {
        //if there is a generated file already load the values
        if (clientPropsPath.exists()) {
            p.load(new FileInputStream(clientPropsPath));
        }
    }


    @TaskAction
    def save() {
        p.put("user.agent.name", project.clientName)
        p.put("user.agent.version", project.version)
        p.store(new FileOutputStream(clientPropsPath), "User agent information for this client")
    }

    String getPropertyValue(String key) {
        return p.getProperty(key)
    }
}

//generate a client props file, make the jar task depend on this
task generateClientPropertiesFile(type: ClientProperties) {
    clientPropsPath = new File(buildDir, "tmp/com.cloudant.client.properties")
    outputs.upToDateWhen {
        if (clientPropsPath.exists()) {
            it.load()
            return project.clientName.equals(it.getPropertyValue("user.agent.name")) && project.version.equals(it.getPropertyValue("user.agent.version"))
        } else {
            return false
        }
    }
}
jar.dependsOn generateClientPropertiesFile
//include the client props in the built jar
jar {
    into "META-INF", { from generateClientPropertiesFile.clientPropsPath }
}

uploadArchives {
    repositories {
        mavenDeployer {

            //augment the pom with additional information
            pom.project {
                description 'Official Cloudant client for Java'
                inceptionYear '2014'
            }
        }
    }
}
