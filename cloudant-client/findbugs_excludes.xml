<!--
  ~ Copyright Â© 2015, 2017 IBM Corp. All rights reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  ~ except in compliance with the License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software distributed under the
  ~ License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
  ~ either express or implied. See the License for the specific language governing permissions
  ~ and limitations under the License.
  -->
<!--
A list of known findbugs issues that we cannot fix at this time.
For example because it requires an API change
-->
<FindBugsFilter>
    
    <!-- This bug is because com.cloudant.client.api.model.Document extends
     com.cloudant.org.lightcouch.Document. Eventually we may roll them into one class and then this
     exclude can be removed.
     -->
    <Match>
        <Bug code="Nm" pattern="NM_SAME_SIMPLE_NAME_AS_SUPERCLASS"/>
        <Class name="com.cloudant.client.api.model.Document"/>
    </Match>
    
    <!-- This bug is because addAttachment in com.cloudant.client.api.model.Document does not
     override the addAttachment in com.cloudant.org.lightcouch.Document. This is because of the two
     different Attachment classes. This leads to the confusing situation where there are two
     addAttachment methods on the API document class and it is hard to distinguish which to use.
     Again this can be resolved if we consolidate the Document and Attachment classes from the two
     packages.
     -->
    <Match>
        <Bug code="Nm" pattern="NM_WRONG_PACKAGE"/>
        <Class name="com.cloudant.client.api.model.Document"/>
        <Method name="addAttachment"/>
    </Match>

    <!-- Some private fields are flagged as never being written to. This fails to take into account
    the GSON deserialization which reflectively sets the fields, so these findbugs can be ignored.
    -->
    <Match>
        <Bug code="UwF" pattern="UWF_UNWRITTEN_FIELD"/>
        <Class name="com.cloudant.client.org.lightcouch.Attachment"/>
    </Match>
    <Match>
        <Bug code="UwF" pattern="UWF_UNWRITTEN_FIELD"/>
        <Class name="com.cloudant.client.api.model.ChangesResult$Row$Rev"/>
    </Match>


    <!-- Returning null instead of a zero length array has special meaning in these cases.
     Firstly, null indicates that no keys have been added to the query so we should not write a
      parameter at all, whereas the empty array would otherwise get written to the request.
     The remaining three cases are all also cases where a null means don't specify a parameter, but
      the empty array means the empty set.
    -->
    <Match>
        <Bug code="PZLA" pattern="PZLA_PREFER_ZERO_LENGTH_ARRAYS"/>
        <Class name="com.cloudant.client.internal.views.ViewQueryParameters"/>
        <Method name="getKeys"/>
    </Match>
    <Match>
        <Bug code="PZLA" pattern="PZLA_PREFER_ZERO_LENGTH_ARRAYS"/>
        <Class name="com.cloudant.client.api.model.SearchResult$SearchResultRow"/>
        <Method name="getOrder"/>
    </Match>
    <Match>
        <Bug code="PZLA" pattern="PZLA_PREFER_ZERO_LENGTH_ARRAYS"/>
        <Class name="com.cloudant.client.org.lightcouch.ReplicatorDocument"/>
        <Method name="getDocIds"/>
    </Match>
    <Match>
        <Bug code="PZLA" pattern="PZLA_PREFER_ZERO_LENGTH_ARRAYS"/>
        <Class name="com.cloudant.client.org.lightcouch.ReplicatorDocument$UserCtx"/>
        <Method name="getRoles"/>
    </Match>

    <!-- It is true that a null check is redundant here, but we should keep it for consistency in
    case the underlying FindByIndexOptions changes -->
    <Match>
        <Bug code="RCN" pattern="RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"/>
        <Class name="com.cloudant.client.api.Database"/>
        <Method name="getFindByIndexBody"/>
    </Match>

    <!-- We catch Exception in where it isn't explicitly thrown. We should probably
    catch a more specific type, but ignore it for now. -->
    <Match>
        <Bug code="REC" pattern="REC_CATCH_EXCEPTION"/>
        <Class name="com.cloudant.client.api.Changes"/>
        <Method name="readNextRow"/>
    </Match>

    <!-- This bug is because com.cloudant.client.internal.util.CloudFoundryService is populated via
    GSON. -->
    <Match>
        <Bug code="UwF" pattern="UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD"/>
        <Class name="com.cloudant.client.internal.util.CloudFoundryService"/>
        <Field name="credentials"/>
    </Match>
    <Match>
        <Bug code="UwF" pattern="UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD"/>
        <Class name="com.cloudant.client.internal.util.CloudFoundryService"/>
        <Field name="name"/>
    </Match>
    <Match>
        <Bug code="UwF" pattern="UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD"/>
        <Class name="com.cloudant.client.internal.util.CloudFoundryService$CloudFoundryServiceCredentials"/>
        <Field name="url"/>
    </Match>


    <!-- This is likely a false positive in Findbugs, the IDE doesn't complain an unchecked cast.
    See https://sourceforge.net/p/findbugs/bugs/1242/

    In these cases the Definition instance is a TextIndex.Definition and the type is specified in
    the superclass by parameter "D" and instantiated in the TextIndex constructor so there should
    never be a different type in the field so it should be safe to ignore these warnings.
    -->
    <Match>
        <Bug code="BC" pattern="BC_UNCONFIRMED_CAST"/>
        <!-- can't use a class name here because the bug type returns multiple classes for the cast
        types and the calling locations -->
        <!-- method names are the places where the cast occurs -->
        <Or>
            <Method name="getAnalyzer"/>
            <Method name="getDefaultField"/>
            <Method name="getIndexArrayLengths"/>
            <Method name="analyzer"/>
            <Method name="defaultField"/>
            <Method name="indexArrayLengths"/>
        </Or>
    </Match>

</FindBugsFilter>
